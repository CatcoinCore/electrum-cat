#!/bin/bash -l

function buildBinary(){
  if [ ${TYPE} = "local" ]
  then
    echo "Setting up Local build"
    mkdir -pv repo
    sudo tar -C ../../ -cpv --exclude=contrib/* . |sudo  tar -C repo -xpf -
    sleep 10
  fi
  mkdir -pv $(pwd)/releases
  echo "Making Release packages for $VERSION"
  $DOCKERBIN run --rm -it --privileged -e MKPKG_VER=${VERSION} -v $(pwd)/releases:/releases -v $(pwd)/helpers:/root  -v $(pwd)/repo:/root/repo  -v $(pwd)/source:/opt/wine-electrum/drive_c/electrum-grs/ -v $(pwd):/root/electrum-grs-release mazaclub/electrum-grs-winbuild /root/make_release $VERSION $TYPE \
   && echo "Making Windows EXEs for $VERSION" \
   && $DOCKERBIN run --rm -it --privileged -e MKPKG_VER=${VERSION} -v $(pwd)/helpers:/root  -v $(pwd)/repo:/root/repo  -v $(pwd)/source:/opt/wine-electrum/drive_c/electrum-grs/ -v $(pwd):/root/electrum-grs-release mazaclub/electrum-grs-winbuild /root/build-binary $VERSION \
   && echo "Additional Packaging for $VERSION" \
   && $DOCKERBIN run --rm -it --privileged -e MKPKG_VER=${VERSION} -v $(pwd)/helpers:/root  -v $(pwd)/repo:/root/repo  -v $(pwd)/source:/opt/wine-electrum/drive_c/electrum-grs/ -v $(pwd):/root/electrum-grs-release mazaclub/electrum-grs-winbuild /bin/bash
  if [[ $? = 0 ]]; then
    echo "Build successful."
  else
    echo "Seems like the build failed. Exiting."
    exit
  fi
  cp $(pwd)/source/Electrum-grs-${VERSION}/dist/electrum-grs.exe $(pwd)/releases/Electrum-grs-$VERSION.exe
  cp $(pwd)/source/Electrum-grs-${VERSION}/dist/electrum-grs-setup.exe $(pwd)/releases/Electrum-grs-$VERSION-setup.exe
  cp -av $(pwd)/repo/dist/* $(pwd)/releases/
  if [ "${TYPE}" = "SIGNED" ] ; then
    cd releases
    for release in * 
    do
      sha1sum ${release} > ${release}.sha1
      md5sum ${release} > ${release}.md5
      gpg --sign --armor --detach  ${release}
      gpg --sign --armor --detach  ${release}.md5
      gpg --sign --armor --detach  ${release}.sha1
    done
  fi
  echo "You can find your Electrum-grss $VERSION binaries in the releases folder."

}

function buildImage(){
  echo "Building image"
  #$DOCKERBIN build -t mazaclub/electrum-grs-winbuild .
}
function buildLtcScrypt() {
## this will be integrated into the main build in a later release
#   wget https://pypi.python.org/packages/source/l/ltc_scrypt/ltc_scrypt-1.0.tar.gz
    git clone https://github.com/groestlcoin/groestlcoin-hash-python
    cp sph_types.patch groestlcoin-hash-python
    cd groestlcoin-hash-python
    patch < sph_types.patch
    cd ..
    sleep 10
   #tar -xpzvf ltc_scrypt-1.0.tar.gz 
   docker run -t -i \
    -e WINEPREFIX="/wine/wine-py2.7.8-32" \
    -v $(pwd)/groestlcoin-hash-python:/code \
    -v $(pwd)/helpers:/helpers \
    ogrisel/python-winbuilder wineconsole --backend=curses  Z:\\helpers\\groestlcoin_hash-build.bat
    sleep 10
   cp groestlcoin-hash-python/build/lib.win32-2.7/groestlcoin_hash.pyd helpers/groestlcoin_hash.pyd

#   echo "Building ltc_scrypt module for OSX"
#   docker run -it --rm \
#    -e LDFLAGS="-L/usr/x86_64-apple-darwin14/SDK/MacOSX10.10.sdk/usr/lib/ -L/usr/x86_64-apple-darwin14/lib" \
#    -e PYTHONXCPREFIX="/usr/x86_64-apple-darwin14/" \
#    -e MAC_SDK_VERSION="10.10" \
#    -e LD_LIBRARY_PATH="/usr/lib/llvm-3.4/lib:/usr/x86_64-apple-darwin14/lib" \
#    -e PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/x86_64-apple-darwin14/bin" \
#    -e CROSS_TRIPLE="x86_64-apple-darwin14" \
#    -e LDSHARED="x86_64-apple-darwin14-cc -shared" \
#    -e CROSS_ROOT="/usr/x86_64-apple-darwin14" \
#    -e CC="x86_64-apple-darwin14-cc" \
#    -e CROSS_COMPILE="x86_64-apple-darwin14-" \
#    -v $(pwd)/ltc_scrypt-1.0:/code \
#    -v $(pwd)/helpers/build-darwin-ltc_scrypt.sh:/build-darwin-ltc_scrypt.sh \
#    mazaclub/cross-compiler:darwin-x64 /build-darwin-ltc_scrypt.sh
#    cp -v ltc_scrypt-1.0/build/lib.darwin-x64/ltc_scrypt.dylib helpers/ltc_scrypt.dylib

}
function buildDarkcoinHash() {
## this will be integrated into the main build in a later release
   wget https://github.com/guruvan/darkcoin_hash/archive/1.1.tar.gz
   tar -xpzvf 1.1.tar.gz
   docker run -t -i \
    -e WINEPREFIX="/wine/wine-py2.7.8-32" \
    -v $(pwd)/darkcoin_hash-1.1:/code \
    -v $(pwd)/helpers:/helpers \
    ogrisel/python-winbuilder wineconsole --backend=curses  Z:\\helpers\\darkcoin_hash-build.bat
   cp darkcoin_hash-1.1/build/lib.win32-2.7/darkcoin_hash.pyd helpers/darkcoin_hash.pyd

   echo "Building darkcoin_hash module for OSX"
   docker run -it --rm \
    -e LDFLAGS="-L/usr/x86_64-apple-darwin14/SDK/MacOSX10.10.sdk/usr/lib/ -L/usr/x86_64-apple-darwin14/lib -L/usr/x86_64-apple-darwin14/SDK/Mac
OSX10.10.sdk/usr/libexec/" \
    -e PYTHONXCPREFIX="/usr/x86_64-apple-darwin14/" \
    -e MAC_SDK_VERSION="10.10" \
    -e LD_LIBRARY_PATH="/usr/lib/llvm-3.4/lib:/usr/x86_64-apple-darwin14/lib" \
    -e PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/x86_64-apple-darwin14/bin" \
    -e CROSS_TRIPLE="x86_64-apple-darwin14" \
    -e LDSHARED="x86_64-apple-darwin14-cc -shared" \
    -e CROSS_ROOT="/usr/x86_64-apple-darwin14" \
    -e CC="x86_64-apple-darwin14-cc" \
    -e CROSS_COMPILE="x86_64-apple-darwin14-" \
    -v $(pwd)/darkcoin_hash-1.1:/code \
    -v $(pwd)/helpers/build-darwin-darkcoin_hash.sh:/build-darwin-darkcoin_hash.sh \
    mazaclub/cross-compiler:darwin-x64 /build-darwin-darkcoin_hash.sh
    cp -v darkcoin_hash-1.1/build/lib.darwin-x64/darkcoin_hash.dylib helpers/darkcoin_hash.dylib

}

function prepareFile(){
  echo "Preparing file for Electrum-grs version $VERSION"
  if [ -e "$TARGETPATH" ]; then
    echo "Version tar already downloaded."
  else
   wget https://github.com/mazaclub/electrum-grs/archive/v${VERSION}.zip -O $TARGETPATH
  fi

  if [ -d "$TARGETFOLDER" ]; then
    echo "Version is already extracted"
  else
     unzip -d $(pwd)/source ${TARGETPATH} 
   # tar -xvf $TARGETPATH -C $(pwd)/source
  fi
}

if [[ $# -gt 0 ]]; then
  VERSION=$1
  TYPE=${2:-tagged}
  FILENAME=Electrum-grs-$VERSION.zip
  TARGETPATH=$(pwd)/source/$FILENAME
  TARGETFOLDER=$(pwd)/source/Electrum-grs-$VERSION
  echo "Building Electrum-grs $VERSION from $FILENAME"
else
  echo "Usage: ./build <version>."
  echo "For example: ./build 1.9.8"
  exit
fi

which docker
if [[ $? = 0 ]]; then
  DOCKERBIN=$(which docker)
fi

which docker.io
if [[ $? = 0 ]]; then
  DOCKERBIN=$(which docker.io)
fi

if [[ -z "$DOCKERBIN" ]]; then
        echo "Could not find docker binary, exiting"
        exit
else
        echo "Using docker at $DOCKERBIN"
fi

buildLtcScrypt
#buildDarkcoinHash
# Build docker image
buildImage

# Prepare host file system
#prepareFile

# Build files
buildBinary
